import sqlite3, os, random, messages
from telebot import TeleBot, types, formatting
from config import telegram_channel_link, BOT_TOKEN

bot = TeleBot(BOT_TOKEN)

conn = sqlite3.connect('avtos.db', check_same_thread=False)
cursor = conn.cursor()

def initialize_db():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS avto (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            feedback_text TEXT,
            reting INTEGER
        );
    ''')
    conn.commit()

initialize_db()


latest_works = {
    '–†—É–ª–∏': ['761.jpg', '718.jpg'], 
    '–°–∞–ª–æ–Ω—ã': [],
    '–ü–æ—Ç–æ–ª–∫–∏': [],
    '–í—ã—à–∏–≤–∫–∏': []
}

feedbacks = []

IMAGE_DIR = 'images'
if not os.path.exists(IMAGE_DIR):
    os.makedirs(IMAGE_DIR)

@bot.message_handler(commands=['start'])
def start_message(message):
    sticker_id = 'CAACAgIAAxkBAAKWuGdI4Fe4nvFJOuucwXHQsbuoS9Q1AAI1AQACMNSdEbS4Nf1moLZ8NgQ'
    bot.send_sticker(message.chat.id, sticker_id)
    response = random.choice(messages.start_message)
    markup = create_start_markup()
    bot.send_message(message.chat.id, response, reply_markup=markup)

def create_start_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_job = types.KeyboardButton('üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –†–∞–±–æ—Ç—ã')
    btn_info = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    btn_feedback = types.KeyboardButton('‚≠êÔ∏è –û—Ç–∑—ã–≤')
    btn_rewars = types.KeyboardButton('üì£ –í—Å–µ –æ—Ç–∑—ã–≤—ã')
    btn_map = types.KeyboardButton("üó∫ –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è")
    markup.add(btn_job, btn_rewars)
    markup.add(btn_feedback, btn_info)
    markup.add(btn_map)
    return markup

@bot.message_handler(func=lambda message: message.text == 'üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –†–∞–±–æ—Ç—ã')
def last_category_work(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_rul = types.KeyboardButton('–†—É–ª–∏')
    btn_salon = types.KeyboardButton('–°–∞–ª–æ–Ω—ã')
    btn_potolok = types.KeyboardButton('–ü–æ—Ç–æ–ª–∫–∏')
    markup.add(btn_rul, btn_salon)
    markup.add(btn_potolok)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

def send_photos_from_category(chat_id, category):
    for photo_path in latest_works[category]:
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo)

@bot.message_handler(func=lambda message: message.text == 'üó∫ –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è')
def message_map(message):
    latitude = 46.358748
    longitude = 48.092962
    bot.send_location(message.chat.id, latitude=latitude, longitude=longitude)
    bot.send_message(message.chat.id, '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—Å—É')

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def information_message(message):
    bot.send_message(message.chat.id, messages.info_message)

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_to_previous(message):

    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_job = types.KeyboardButton('üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –†–∞–±–æ—Ç—ã')
    btn_info = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    btn_feedback = types.KeyboardButton('‚≠êÔ∏è –û—Ç–∑—ã–≤')
    btn_map = types.KeyboardButton("üó∫ –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è")
    btn_rewars = types.KeyboardButton('üì£ –í—Å–µ –æ—Ç–∑—ã–≤—ã')
    markup.add(btn_job, btn_rewars)
    markup.add(btn_feedback, btn_info)
    markup.add(btn_map)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚≠êÔ∏è –û—Ç–∑—ã–≤')
def handle_username(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, handle_add_feedback)

def handle_add_feedback(message):
    username = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(message, lambda msg: request_rating(msg, username))

def request_rating(message, username):
    feedback_text = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5):")
    bot.register_next_step_handler(message, lambda msg: save_feedback(msg, username, feedback_text))

def save_feedback(message, username, feedback_text):
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            cursor.execute('INSERT INTO avto (username, feedback_text, reting) VALUES (?, ?, ?)', 
                           (username, feedback_text, rating))
            conn.commit()

            stars = '‚≠êÔ∏è' * rating
            text = f"–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã: {stars},\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{username}: {feedback_text}\n"
            bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            bot.register_next_step_handler(message, lambda msg: save_feedback(msg, username, feedback_text))
    except ValueError:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        bot.register_next_step_handler(message, lambda msg: save_feedback(msg, username, feedback_text))

@bot.message_handler(func=lambda message: message.text == 'üì£ –í—Å–µ –æ—Ç–∑—ã–≤—ã')
def handle_rewards(message):
    cursor.execute('SELECT username, feedback_text, reting FROM avto')
    feedbacks = cursor.fetchall()
    
    if feedbacks:
        all_feedbacks = '\n'.join([f"–û—Ü–µ–Ω–∫–∞: {'‚≠êÔ∏è' * rating}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{username}: {feedback_text}\n" for username, feedback_text, rating in feedbacks])
        bot.send_message(message.chat.id, "–í–æ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã:\n" + all_feedbacks)
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤')

@bot.message_handler(func=lambda message: message.text in latest_works.keys())
def works_message(message):
    category = message.text
    
    if category not in latest_works:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    works_response = "\n" if latest_works[category] else "–ù–µ—Ç —Ä–∞–±–æ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

    media = []
    for photo_filename in latest_works[category]:
        photo_path = os.path.join(IMAGE_DIR, photo_filename) 
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                media.append(types.InputMediaPhoto(photo_file.read(), caption=works_response if not media else None))

    if media:
        bot.send_media_group(message.chat.id, media)
        bot.send_message(message.chat.id, f"–í–æ—Ç –≤—Å–µ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category + "\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: " + telegram_channel_link)
    else:
        bot.send_message(message.chat.id, '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç—É —Ä–∞–±–æ—Ç')

if __name__ == '__main__':
    bot.polling(none_stop=True)
